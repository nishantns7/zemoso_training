curl -s http://public-dns.info/nameserver/br.csv | cut -d, -f1 | shuf | tail -n 50 | xargs -i timeout 1 ping -c1 -w 1 {} | grep "time=" | awk '{print substr($7, 6, length($7)) " " substr($4, 1, length($4) -1)}' | sort -n | awk '{print $2 " " $1 "ms"}' | head -n 10



The '|' pipe character gives the output of the first command as the input of the second command and leads to a cascade of commands.


curl -s http://public-dns.info/nameserver/br.csv

	Transfers the file from the server at the URL to the user's computer. It downloads the br.csv file and the pipe passes it to the next command. The -s option makes it silent - it does not display the progress of the transfer or any error messages.


cut -d, -f1

	Splits each line of a file into different sections. The "-d," option specifies the delimiter as being ',' and each time a comma is encountered in a line, a field is created. And "-f1" specifies that the output must be the first of such fields.


shuf

	Shuffles the lines of the input. Outputs one permutation of the lines in the input.


tail -n 50

	Displays the last 10 lines of the input as output by default. But the "-n 50" option overrides it to display the last 50 lines of the input as output.


xargs -i timeout 1 ping -c1 -w 1 {}

	xargs allows the stdout of the previous command to be used as arguments for the next command. The option "-i" without an argument implies that the arguments are supplied one at a time by xargs and and it will be added at the point marked by "{}". "timeout 1" ensures that the rest of the command doesn't take more than 1 second for each argument. If it does, it'll kill it and move on to the next argument provided by xargs. Ping command sends a packet of data to the destination (the argument provided by xargs and marked by "{}") and records the total time it takes for the packet to return. The "-c1" option is the packet counter - only one packet will be sent. The "-w 1" option specifies the time after which the ping command exits regardless of the packet count, as 1 second.


grep "time="

	Returns only the lines in the input with the string "time=" present in it as the output.


awk '{print substr($7, 6, length($7)) " " substr($4, 1, length($4) -1)}'

	The awk command is used to run programs in the AWK language. The code is enclosed in quotes so that the shell does not interpret the special characters as different. The substr() function takes three arguments, the string number, starting position and the number of characters in the substring respectively. In the line,
64 bytes from 201.17.28.103: icmp_seq=1 ttl=51 time=332 ms
the first substr() call will consider string number 7, "time=332" and then makes a substring of length 8, starting from the 6th character, '3'. This results in the substring "332". Similarly the next substr() call makes a substring out of string number 4, dropping the colon at the end because the number of characters has been specified as "length($4)-1". The print statement prints the strings these functions return with a space in between.


sort -n

	Sorts the lines of a text file. The "-n" option makes the sort numeric.


awk '{print $2 " " $1 "ms"}'

	Uses AWK language to switch the order of the strings, IP address first and then ping, and adds the string "ms" next to the ping.


head -n 10

	Displays the first 10 lines of the input as output. The "-n 10" option overrides the default and displays 10 lines.


Final Output

189.125.73.13 324ms
186.195.183.2 332ms
177.92.1.38 334ms
200.209.145.234 335ms
200.195.177.242 336ms
200.195.154.122 338ms
177.200.192.210 340ms
200.221.11.100 345ms
200.195.153.163 346ms
186.251.160.185 347ms

	The final output is a list of 10 of the IP addresses from the file downloaded using curl, with the least ping times.
